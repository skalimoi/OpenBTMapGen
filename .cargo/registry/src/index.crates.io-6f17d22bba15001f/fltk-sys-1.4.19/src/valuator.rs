/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Widget {
    _unused: [u8; 0],
}
pub type Fl_Callback = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
>;
pub type custom_handler_callback = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Fl_Widget,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type custom_draw_callback = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Slider {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Slider_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Slider;
}
extern "C" {
    pub fn Fl_Slider_x(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_y(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_width(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_height(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_label(arg1: *mut Fl_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Slider_set_label(arg1: *mut Fl_Slider, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Slider_redraw(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_show(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_hide(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_activate(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_deactivate(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_redraw_label(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_resize(
        arg1: *mut Fl_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Slider_widget_resize(
        arg1: *mut Fl_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Slider_tooltip(arg1: *mut Fl_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Slider_set_tooltip(arg1: *mut Fl_Slider, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Slider_get_type(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_set_type(arg1: *mut Fl_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_color(arg1: *mut Fl_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Slider_set_color(arg1: *mut Fl_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Slider_measure_label(
        arg1: *const Fl_Slider,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Slider_label_color(arg1: *mut Fl_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Slider_set_label_color(arg1: *mut Fl_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Slider_label_font(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_set_label_font(arg1: *mut Fl_Slider, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_label_size(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_set_label_size(arg1: *mut Fl_Slider, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_label_type(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_set_label_type(arg1: *mut Fl_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_box(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_set_box(arg1: *mut Fl_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_changed(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_set_changed(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_clear_changed(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_align(arg1: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_set_align(arg1: *mut Fl_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_delete(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_set_image(arg1: *mut Fl_Slider, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Slider_handle(
        self_: *mut Fl_Slider,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Slider_handle_event(
        self_: *mut Fl_Slider,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_draw(
        self_: *mut Fl_Slider,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Slider_resize_callback(
        self_: *mut Fl_Slider,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Slider_set_when(arg1: *mut Fl_Slider, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_when(arg1: *const Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_image(arg1: *const Fl_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_parent(self_: *const Fl_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_selection_color(arg1: *mut Fl_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Slider_set_selection_color(arg1: *mut Fl_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Slider_do_callback(arg1: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_inside(
        self_: *const Fl_Slider,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_window(arg1: *const Fl_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_top_window(arg1: *const Fl_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_takes_events(arg1: *const Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_user_data(arg1: *const Fl_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_take_focus(self_: *mut Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_set_visible_focus(self_: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_clear_visible_focus(self_: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_visible_focus(self_: *mut Fl_Slider, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_has_visible_focus(self_: *mut Fl_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Slider_set_user_data(arg1: *mut Fl_Slider, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Slider_draw_data(self_: *const Fl_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_handle_data(self_: *const Fl_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_set_draw_data(self_: *mut Fl_Slider, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Slider_set_handle_data(self_: *mut Fl_Slider, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Slider_damage(self_: *const Fl_Slider) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Slider_set_damage(self_: *mut Fl_Slider, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Slider_set_damage_area(
        self_: *mut Fl_Slider,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Slider_clear_damage(self_: *mut Fl_Slider);
}
extern "C" {
    pub fn Fl_Slider_as_window(self_: *mut Fl_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_as_group(self_: *mut Fl_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_set_deimage(arg1: *mut Fl_Slider, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Slider_deimage(arg1: *const Fl_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Slider_set_callback(
        arg1: *mut Fl_Slider,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Slider_set_deleter(
        arg1: *mut Fl_Slider,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Slider_visible(self_: *const Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_visible_r(self_: *const Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_active(self_: *const Fl_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Slider_active_r(self_: *const Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_callback(self_: *const Fl_Slider) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Slider_set_deletion_callback(
        self_: *mut Fl_Slider,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Slider_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Slider;
}
extern "C" {
    pub fn Fl_Slider_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Slider;
}
extern "C" {
    pub fn Fl_Slider_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_slider_size(self_: *const Fl_Slider) -> f32;
}
extern "C" {
    pub fn Fl_Slider_set_slider_size(self_: *mut Fl_Slider, v: f32);
}
extern "C" {
    pub fn Fl_Slider_slider_box(self_: *const Fl_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_set_slider_box(self_: *mut Fl_Slider, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_set_bounds(arg1: *mut Fl_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Slider_minimum(arg1: *mut Fl_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Slider_set_minimum(arg1: *mut Fl_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Slider_maximum(arg1: *mut Fl_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Slider_set_maximum(arg1: *mut Fl_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Slider_set_range(arg1: *mut Fl_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Slider_set_step(arg1: *mut Fl_Slider, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_step(arg1: *mut Fl_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Slider_set_precision(arg1: *mut Fl_Slider, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Slider_value(arg1: *mut Fl_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Slider_set_value(arg1: *mut Fl_Slider, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_format(
        arg1: *mut Fl_Slider,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Slider_round(arg1: *mut Fl_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Slider_clamp(arg1: *mut Fl_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Slider_increment(arg1: *mut Fl_Slider, arg2: f64, arg3: ::std::os::raw::c_int)
        -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Nice_Slider {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Nice_Slider_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Nice_Slider;
}
extern "C" {
    pub fn Fl_Nice_Slider_x(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_y(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_width(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_height(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_label(arg1: *mut Fl_Nice_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_label(
        arg1: *mut Fl_Nice_Slider,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_redraw(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_show(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_hide(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_activate(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_deactivate(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_redraw_label(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_resize(
        arg1: *mut Fl_Nice_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_widget_resize(
        arg1: *mut Fl_Nice_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_tooltip(arg1: *mut Fl_Nice_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_tooltip(
        arg1: *mut Fl_Nice_Slider,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_get_type(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_type(arg1: *mut Fl_Nice_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_color(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_color(arg1: *mut Fl_Nice_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Nice_Slider_measure_label(
        arg1: *const Fl_Nice_Slider,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_label_color(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_label_color(arg1: *mut Fl_Nice_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Nice_Slider_label_font(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_label_font(arg1: *mut Fl_Nice_Slider, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_label_size(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_label_size(arg1: *mut Fl_Nice_Slider, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_label_type(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_label_type(arg1: *mut Fl_Nice_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_box(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_box(arg1: *mut Fl_Nice_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_changed(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_changed(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_clear_changed(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_align(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_align(arg1: *mut Fl_Nice_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_delete(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_set_image(arg1: *mut Fl_Nice_Slider, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Nice_Slider_handle(
        self_: *mut Fl_Nice_Slider,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_handle_event(
        self_: *mut Fl_Nice_Slider,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_draw(
        self_: *mut Fl_Nice_Slider,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_resize_callback(
        self_: *mut Fl_Nice_Slider,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_set_when(arg1: *mut Fl_Nice_Slider, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_when(arg1: *const Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_image(arg1: *const Fl_Nice_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_parent(self_: *const Fl_Nice_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_selection_color(arg1: *mut Fl_Nice_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_selection_color(
        arg1: *mut Fl_Nice_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_do_callback(arg1: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_inside(
        self_: *const Fl_Nice_Slider,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_window(arg1: *const Fl_Nice_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_top_window(arg1: *const Fl_Nice_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_takes_events(arg1: *const Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_user_data(arg1: *const Fl_Nice_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_take_focus(self_: *mut Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_visible_focus(self_: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_clear_visible_focus(self_: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_visible_focus(self_: *mut Fl_Nice_Slider, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_has_visible_focus(self_: *mut Fl_Nice_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_user_data(
        arg1: *mut Fl_Nice_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_draw_data(self_: *const Fl_Nice_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_handle_data(self_: *const Fl_Nice_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_draw_data(
        self_: *mut Fl_Nice_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_set_handle_data(
        self_: *mut Fl_Nice_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_damage(self_: *const Fl_Nice_Slider) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_damage(self_: *mut Fl_Nice_Slider, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Nice_Slider_set_damage_area(
        self_: *mut Fl_Nice_Slider,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_clear_damage(self_: *mut Fl_Nice_Slider);
}
extern "C" {
    pub fn Fl_Nice_Slider_as_window(self_: *mut Fl_Nice_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_as_group(self_: *mut Fl_Nice_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_deimage(arg1: *mut Fl_Nice_Slider, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Nice_Slider_deimage(arg1: *const Fl_Nice_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_callback(
        arg1: *mut Fl_Nice_Slider,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_set_deleter(
        arg1: *mut Fl_Nice_Slider,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_visible(self_: *const Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_visible_r(self_: *const Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_active(self_: *const Fl_Nice_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Nice_Slider_active_r(self_: *const Fl_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_callback(self_: *const Fl_Nice_Slider) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_deletion_callback(
        self_: *mut Fl_Nice_Slider,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Nice_Slider_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Nice_Slider;
}
extern "C" {
    pub fn Fl_Nice_Slider_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Nice_Slider;
}
extern "C" {
    pub fn Fl_Nice_Slider_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_set_bounds(arg1: *mut Fl_Nice_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Nice_Slider_minimum(arg1: *mut Fl_Nice_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_minimum(arg1: *mut Fl_Nice_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Nice_Slider_maximum(arg1: *mut Fl_Nice_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_maximum(arg1: *mut Fl_Nice_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Nice_Slider_set_range(arg1: *mut Fl_Nice_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Nice_Slider_set_step(arg1: *mut Fl_Nice_Slider, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_step(arg1: *mut Fl_Nice_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_precision(arg1: *mut Fl_Nice_Slider, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Nice_Slider_value(arg1: *mut Fl_Nice_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Nice_Slider_set_value(arg1: *mut Fl_Nice_Slider, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_format(
        arg1: *mut Fl_Nice_Slider,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Nice_Slider_round(arg1: *mut Fl_Nice_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Nice_Slider_clamp(arg1: *mut Fl_Nice_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Nice_Slider_increment(
        arg1: *mut Fl_Nice_Slider,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Counter {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Counter_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Counter;
}
extern "C" {
    pub fn Fl_Counter_x(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_y(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_width(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_height(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_label(arg1: *mut Fl_Counter) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Counter_set_label(arg1: *mut Fl_Counter, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Counter_redraw(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_show(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_hide(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_activate(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_deactivate(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_redraw_label(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_resize(
        arg1: *mut Fl_Counter,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Counter_widget_resize(
        arg1: *mut Fl_Counter,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Counter_tooltip(arg1: *mut Fl_Counter) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Counter_set_tooltip(arg1: *mut Fl_Counter, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Counter_get_type(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_set_type(arg1: *mut Fl_Counter, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_color(arg1: *mut Fl_Counter) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Counter_set_color(arg1: *mut Fl_Counter, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Counter_measure_label(
        arg1: *const Fl_Counter,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Counter_label_color(arg1: *mut Fl_Counter) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Counter_set_label_color(arg1: *mut Fl_Counter, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Counter_label_font(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_set_label_font(arg1: *mut Fl_Counter, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_label_size(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_set_label_size(arg1: *mut Fl_Counter, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_label_type(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_set_label_type(arg1: *mut Fl_Counter, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_box(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_set_box(arg1: *mut Fl_Counter, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_changed(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_set_changed(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_clear_changed(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_align(arg1: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_set_align(arg1: *mut Fl_Counter, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_delete(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_set_image(arg1: *mut Fl_Counter, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Counter_handle(
        self_: *mut Fl_Counter,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Counter_handle_event(
        self_: *mut Fl_Counter,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_draw(
        self_: *mut Fl_Counter,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Counter_resize_callback(
        self_: *mut Fl_Counter,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Counter_set_when(arg1: *mut Fl_Counter, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_when(arg1: *const Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_image(arg1: *const Fl_Counter) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_parent(self_: *const Fl_Counter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_selection_color(arg1: *mut Fl_Counter) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Counter_set_selection_color(arg1: *mut Fl_Counter, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Counter_do_callback(arg1: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_inside(
        self_: *const Fl_Counter,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_window(arg1: *const Fl_Counter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_top_window(arg1: *const Fl_Counter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_takes_events(arg1: *const Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_user_data(arg1: *const Fl_Counter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_take_focus(self_: *mut Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_set_visible_focus(self_: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_clear_visible_focus(self_: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_visible_focus(self_: *mut Fl_Counter, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_has_visible_focus(self_: *mut Fl_Counter) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Counter_set_user_data(arg1: *mut Fl_Counter, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Counter_draw_data(self_: *const Fl_Counter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_handle_data(self_: *const Fl_Counter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_set_draw_data(self_: *mut Fl_Counter, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Counter_set_handle_data(self_: *mut Fl_Counter, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Counter_damage(self_: *const Fl_Counter) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Counter_set_damage(self_: *mut Fl_Counter, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Counter_set_damage_area(
        self_: *mut Fl_Counter,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Counter_clear_damage(self_: *mut Fl_Counter);
}
extern "C" {
    pub fn Fl_Counter_as_window(self_: *mut Fl_Counter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_as_group(self_: *mut Fl_Counter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_set_deimage(arg1: *mut Fl_Counter, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Counter_deimage(arg1: *const Fl_Counter) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Counter_set_callback(
        arg1: *mut Fl_Counter,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Counter_set_deleter(
        arg1: *mut Fl_Counter,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Counter_visible(self_: *const Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_visible_r(self_: *const Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_active(self_: *const Fl_Counter) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Counter_active_r(self_: *const Fl_Counter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_callback(self_: *const Fl_Counter) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Counter_set_deletion_callback(
        self_: *mut Fl_Counter,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Counter_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Counter;
}
extern "C" {
    pub fn Fl_Counter_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Counter;
}
extern "C" {
    pub fn Fl_Counter_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_set_bounds(arg1: *mut Fl_Counter, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Counter_minimum(arg1: *mut Fl_Counter) -> f64;
}
extern "C" {
    pub fn Fl_Counter_set_minimum(arg1: *mut Fl_Counter, a: f64);
}
extern "C" {
    pub fn Fl_Counter_maximum(arg1: *mut Fl_Counter) -> f64;
}
extern "C" {
    pub fn Fl_Counter_set_maximum(arg1: *mut Fl_Counter, a: f64);
}
extern "C" {
    pub fn Fl_Counter_set_range(arg1: *mut Fl_Counter, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Counter_set_step(arg1: *mut Fl_Counter, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_step(arg1: *mut Fl_Counter) -> f64;
}
extern "C" {
    pub fn Fl_Counter_set_precision(arg1: *mut Fl_Counter, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Counter_value(arg1: *mut Fl_Counter) -> f64;
}
extern "C" {
    pub fn Fl_Counter_set_value(arg1: *mut Fl_Counter, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_format(
        arg1: *mut Fl_Counter,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Counter_round(arg1: *mut Fl_Counter, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Counter_clamp(arg1: *mut Fl_Counter, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Counter_increment(
        arg1: *mut Fl_Counter,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Dial {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Dial_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Dial;
}
extern "C" {
    pub fn Fl_Dial_x(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_y(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_width(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_height(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_label(arg1: *mut Fl_Dial) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Dial_set_label(arg1: *mut Fl_Dial, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Dial_redraw(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_show(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_hide(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_activate(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_deactivate(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_redraw_label(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_resize(
        arg1: *mut Fl_Dial,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Dial_widget_resize(
        arg1: *mut Fl_Dial,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Dial_tooltip(arg1: *mut Fl_Dial) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Dial_set_tooltip(arg1: *mut Fl_Dial, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Dial_get_type(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_set_type(arg1: *mut Fl_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_color(arg1: *mut Fl_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Dial_set_color(arg1: *mut Fl_Dial, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Dial_measure_label(
        arg1: *const Fl_Dial,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Dial_label_color(arg1: *mut Fl_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Dial_set_label_color(arg1: *mut Fl_Dial, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Dial_label_font(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_set_label_font(arg1: *mut Fl_Dial, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_label_size(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_set_label_size(arg1: *mut Fl_Dial, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_label_type(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_set_label_type(arg1: *mut Fl_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_box(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_set_box(arg1: *mut Fl_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_changed(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_set_changed(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_clear_changed(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_align(arg1: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_set_align(arg1: *mut Fl_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_delete(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_set_image(arg1: *mut Fl_Dial, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Dial_handle(
        self_: *mut Fl_Dial,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Dial_handle_event(
        self_: *mut Fl_Dial,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_draw(
        self_: *mut Fl_Dial,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Dial_resize_callback(
        self_: *mut Fl_Dial,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Dial_set_when(arg1: *mut Fl_Dial, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_when(arg1: *const Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_image(arg1: *const Fl_Dial) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_parent(self_: *const Fl_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_selection_color(arg1: *mut Fl_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Dial_set_selection_color(arg1: *mut Fl_Dial, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Dial_do_callback(arg1: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_inside(
        self_: *const Fl_Dial,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_window(arg1: *const Fl_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_top_window(arg1: *const Fl_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_takes_events(arg1: *const Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_user_data(arg1: *const Fl_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_take_focus(self_: *mut Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_set_visible_focus(self_: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_clear_visible_focus(self_: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_visible_focus(self_: *mut Fl_Dial, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_has_visible_focus(self_: *mut Fl_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Dial_set_user_data(arg1: *mut Fl_Dial, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Dial_draw_data(self_: *const Fl_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_handle_data(self_: *const Fl_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_set_draw_data(self_: *mut Fl_Dial, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Dial_set_handle_data(self_: *mut Fl_Dial, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Dial_damage(self_: *const Fl_Dial) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Dial_set_damage(self_: *mut Fl_Dial, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Dial_set_damage_area(
        self_: *mut Fl_Dial,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Dial_clear_damage(self_: *mut Fl_Dial);
}
extern "C" {
    pub fn Fl_Dial_as_window(self_: *mut Fl_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_as_group(self_: *mut Fl_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_set_deimage(arg1: *mut Fl_Dial, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Dial_deimage(arg1: *const Fl_Dial) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Dial_set_callback(
        arg1: *mut Fl_Dial,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Dial_set_deleter(
        arg1: *mut Fl_Dial,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Dial_visible(self_: *const Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_visible_r(self_: *const Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_active(self_: *const Fl_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Dial_active_r(self_: *const Fl_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_callback(self_: *const Fl_Dial) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Dial_set_deletion_callback(
        self_: *mut Fl_Dial,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Dial_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Dial;
}
extern "C" {
    pub fn Fl_Dial_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Dial;
}
extern "C" {
    pub fn Fl_Dial_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_angle1(self_: *const Fl_Dial) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn Fl_Dial_angle2(self_: *const Fl_Dial) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn Fl_Dial_set_angle1(self_: *mut Fl_Dial, val: ::std::os::raw::c_short);
}
extern "C" {
    pub fn Fl_Dial_set_angle2(self_: *mut Fl_Dial, val: ::std::os::raw::c_short);
}
extern "C" {
    pub fn Fl_Dial_set_bounds(arg1: *mut Fl_Dial, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Dial_minimum(arg1: *mut Fl_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Dial_set_minimum(arg1: *mut Fl_Dial, a: f64);
}
extern "C" {
    pub fn Fl_Dial_maximum(arg1: *mut Fl_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Dial_set_maximum(arg1: *mut Fl_Dial, a: f64);
}
extern "C" {
    pub fn Fl_Dial_set_range(arg1: *mut Fl_Dial, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Dial_set_step(arg1: *mut Fl_Dial, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_step(arg1: *mut Fl_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Dial_set_precision(arg1: *mut Fl_Dial, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Dial_value(arg1: *mut Fl_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Dial_set_value(arg1: *mut Fl_Dial, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_format(
        arg1: *mut Fl_Dial,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Dial_round(arg1: *mut Fl_Dial, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Dial_clamp(arg1: *mut Fl_Dial, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Dial_increment(arg1: *mut Fl_Dial, arg2: f64, arg3: ::std::os::raw::c_int) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Line_Dial {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Line_Dial_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Line_Dial;
}
extern "C" {
    pub fn Fl_Line_Dial_x(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_y(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_width(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_height(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_label(arg1: *mut Fl_Line_Dial) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Line_Dial_set_label(arg1: *mut Fl_Line_Dial, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Line_Dial_redraw(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_show(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_hide(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_activate(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_deactivate(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_redraw_label(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_resize(
        arg1: *mut Fl_Line_Dial,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_widget_resize(
        arg1: *mut Fl_Line_Dial,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_tooltip(arg1: *mut Fl_Line_Dial) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Line_Dial_set_tooltip(arg1: *mut Fl_Line_Dial, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Line_Dial_get_type(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_set_type(arg1: *mut Fl_Line_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_color(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Line_Dial_set_color(arg1: *mut Fl_Line_Dial, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Line_Dial_measure_label(
        arg1: *const Fl_Line_Dial,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_label_color(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Line_Dial_set_label_color(arg1: *mut Fl_Line_Dial, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Line_Dial_label_font(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_set_label_font(arg1: *mut Fl_Line_Dial, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_label_size(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_set_label_size(arg1: *mut Fl_Line_Dial, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_label_type(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_set_label_type(arg1: *mut Fl_Line_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_box(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_set_box(arg1: *mut Fl_Line_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_changed(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_set_changed(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_clear_changed(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_align(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_set_align(arg1: *mut Fl_Line_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_delete(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_set_image(arg1: *mut Fl_Line_Dial, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Line_Dial_handle(
        self_: *mut Fl_Line_Dial,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_handle_event(
        self_: *mut Fl_Line_Dial,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_draw(
        self_: *mut Fl_Line_Dial,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_resize_callback(
        self_: *mut Fl_Line_Dial,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_set_when(arg1: *mut Fl_Line_Dial, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_when(arg1: *const Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_image(arg1: *const Fl_Line_Dial) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_parent(self_: *const Fl_Line_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_selection_color(arg1: *mut Fl_Line_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Line_Dial_set_selection_color(arg1: *mut Fl_Line_Dial, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Line_Dial_do_callback(arg1: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_inside(
        self_: *const Fl_Line_Dial,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_window(arg1: *const Fl_Line_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_top_window(arg1: *const Fl_Line_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_takes_events(arg1: *const Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_user_data(arg1: *const Fl_Line_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_take_focus(self_: *mut Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_set_visible_focus(self_: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_clear_visible_focus(self_: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_visible_focus(self_: *mut Fl_Line_Dial, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_has_visible_focus(self_: *mut Fl_Line_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Line_Dial_set_user_data(arg1: *mut Fl_Line_Dial, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Line_Dial_draw_data(self_: *const Fl_Line_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_handle_data(self_: *const Fl_Line_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_set_draw_data(self_: *mut Fl_Line_Dial, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Line_Dial_set_handle_data(
        self_: *mut Fl_Line_Dial,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_damage(self_: *const Fl_Line_Dial) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Line_Dial_set_damage(self_: *mut Fl_Line_Dial, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Line_Dial_set_damage_area(
        self_: *mut Fl_Line_Dial,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_clear_damage(self_: *mut Fl_Line_Dial);
}
extern "C" {
    pub fn Fl_Line_Dial_as_window(self_: *mut Fl_Line_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_as_group(self_: *mut Fl_Line_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_set_deimage(arg1: *mut Fl_Line_Dial, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Line_Dial_deimage(arg1: *const Fl_Line_Dial) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Line_Dial_set_callback(
        arg1: *mut Fl_Line_Dial,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_set_deleter(
        arg1: *mut Fl_Line_Dial,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_visible(self_: *const Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_visible_r(self_: *const Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_active(self_: *const Fl_Line_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Line_Dial_active_r(self_: *const Fl_Line_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_callback(self_: *const Fl_Line_Dial) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Line_Dial_set_deletion_callback(
        self_: *mut Fl_Line_Dial,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Line_Dial_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Line_Dial;
}
extern "C" {
    pub fn Fl_Line_Dial_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Line_Dial;
}
extern "C" {
    pub fn Fl_Line_Dial_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_set_bounds(arg1: *mut Fl_Line_Dial, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Line_Dial_minimum(arg1: *mut Fl_Line_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Line_Dial_set_minimum(arg1: *mut Fl_Line_Dial, a: f64);
}
extern "C" {
    pub fn Fl_Line_Dial_maximum(arg1: *mut Fl_Line_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Line_Dial_set_maximum(arg1: *mut Fl_Line_Dial, a: f64);
}
extern "C" {
    pub fn Fl_Line_Dial_set_range(arg1: *mut Fl_Line_Dial, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Line_Dial_set_step(arg1: *mut Fl_Line_Dial, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_step(arg1: *mut Fl_Line_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Line_Dial_set_precision(arg1: *mut Fl_Line_Dial, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Line_Dial_value(arg1: *mut Fl_Line_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Line_Dial_set_value(arg1: *mut Fl_Line_Dial, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_format(
        arg1: *mut Fl_Line_Dial,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Line_Dial_round(arg1: *mut Fl_Line_Dial, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Line_Dial_clamp(arg1: *mut Fl_Line_Dial, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Line_Dial_increment(
        arg1: *mut Fl_Line_Dial,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Roller {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Roller_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Roller;
}
extern "C" {
    pub fn Fl_Roller_x(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_y(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_width(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_height(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_label(arg1: *mut Fl_Roller) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Roller_set_label(arg1: *mut Fl_Roller, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Roller_redraw(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_show(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_hide(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_activate(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_deactivate(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_redraw_label(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_resize(
        arg1: *mut Fl_Roller,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Roller_widget_resize(
        arg1: *mut Fl_Roller,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Roller_tooltip(arg1: *mut Fl_Roller) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Roller_set_tooltip(arg1: *mut Fl_Roller, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Roller_get_type(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_set_type(arg1: *mut Fl_Roller, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_color(arg1: *mut Fl_Roller) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Roller_set_color(arg1: *mut Fl_Roller, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Roller_measure_label(
        arg1: *const Fl_Roller,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Roller_label_color(arg1: *mut Fl_Roller) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Roller_set_label_color(arg1: *mut Fl_Roller, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Roller_label_font(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_set_label_font(arg1: *mut Fl_Roller, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_label_size(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_set_label_size(arg1: *mut Fl_Roller, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_label_type(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_set_label_type(arg1: *mut Fl_Roller, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_box(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_set_box(arg1: *mut Fl_Roller, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_changed(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_set_changed(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_clear_changed(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_align(arg1: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_set_align(arg1: *mut Fl_Roller, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_delete(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_set_image(arg1: *mut Fl_Roller, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Roller_handle(
        self_: *mut Fl_Roller,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Roller_handle_event(
        self_: *mut Fl_Roller,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_draw(
        self_: *mut Fl_Roller,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Roller_resize_callback(
        self_: *mut Fl_Roller,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Roller_set_when(arg1: *mut Fl_Roller, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_when(arg1: *const Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_image(arg1: *const Fl_Roller) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_parent(self_: *const Fl_Roller) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_selection_color(arg1: *mut Fl_Roller) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Roller_set_selection_color(arg1: *mut Fl_Roller, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Roller_do_callback(arg1: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_inside(
        self_: *const Fl_Roller,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_window(arg1: *const Fl_Roller) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_top_window(arg1: *const Fl_Roller) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_takes_events(arg1: *const Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_user_data(arg1: *const Fl_Roller) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_take_focus(self_: *mut Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_set_visible_focus(self_: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_clear_visible_focus(self_: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_visible_focus(self_: *mut Fl_Roller, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_has_visible_focus(self_: *mut Fl_Roller) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Roller_set_user_data(arg1: *mut Fl_Roller, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Roller_draw_data(self_: *const Fl_Roller) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_handle_data(self_: *const Fl_Roller) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_set_draw_data(self_: *mut Fl_Roller, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Roller_set_handle_data(self_: *mut Fl_Roller, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Roller_damage(self_: *const Fl_Roller) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Roller_set_damage(self_: *mut Fl_Roller, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Roller_set_damage_area(
        self_: *mut Fl_Roller,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Roller_clear_damage(self_: *mut Fl_Roller);
}
extern "C" {
    pub fn Fl_Roller_as_window(self_: *mut Fl_Roller) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_as_group(self_: *mut Fl_Roller) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_set_deimage(arg1: *mut Fl_Roller, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Roller_deimage(arg1: *const Fl_Roller) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Roller_set_callback(
        arg1: *mut Fl_Roller,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Roller_set_deleter(
        arg1: *mut Fl_Roller,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Roller_visible(self_: *const Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_visible_r(self_: *const Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_active(self_: *const Fl_Roller) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Roller_active_r(self_: *const Fl_Roller) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_callback(self_: *const Fl_Roller) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Roller_set_deletion_callback(
        self_: *mut Fl_Roller,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Roller_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Roller;
}
extern "C" {
    pub fn Fl_Roller_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Roller;
}
extern "C" {
    pub fn Fl_Roller_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_set_bounds(arg1: *mut Fl_Roller, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Roller_minimum(arg1: *mut Fl_Roller) -> f64;
}
extern "C" {
    pub fn Fl_Roller_set_minimum(arg1: *mut Fl_Roller, a: f64);
}
extern "C" {
    pub fn Fl_Roller_maximum(arg1: *mut Fl_Roller) -> f64;
}
extern "C" {
    pub fn Fl_Roller_set_maximum(arg1: *mut Fl_Roller, a: f64);
}
extern "C" {
    pub fn Fl_Roller_set_range(arg1: *mut Fl_Roller, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Roller_set_step(arg1: *mut Fl_Roller, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_step(arg1: *mut Fl_Roller) -> f64;
}
extern "C" {
    pub fn Fl_Roller_set_precision(arg1: *mut Fl_Roller, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Roller_value(arg1: *mut Fl_Roller) -> f64;
}
extern "C" {
    pub fn Fl_Roller_set_value(arg1: *mut Fl_Roller, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_format(
        arg1: *mut Fl_Roller,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Roller_round(arg1: *mut Fl_Roller, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Roller_clamp(arg1: *mut Fl_Roller, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Roller_increment(arg1: *mut Fl_Roller, arg2: f64, arg3: ::std::os::raw::c_int)
        -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Scrollbar {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Scrollbar_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Scrollbar;
}
extern "C" {
    pub fn Fl_Scrollbar_x(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_y(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_width(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_height(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_label(arg1: *mut Fl_Scrollbar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Scrollbar_set_label(arg1: *mut Fl_Scrollbar, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Scrollbar_redraw(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_show(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_hide(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_activate(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_deactivate(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_redraw_label(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_resize(
        arg1: *mut Fl_Scrollbar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_widget_resize(
        arg1: *mut Fl_Scrollbar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_tooltip(arg1: *mut Fl_Scrollbar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Scrollbar_set_tooltip(arg1: *mut Fl_Scrollbar, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Scrollbar_get_type(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_set_type(arg1: *mut Fl_Scrollbar, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_color(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scrollbar_set_color(arg1: *mut Fl_Scrollbar, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Scrollbar_measure_label(
        arg1: *const Fl_Scrollbar,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_label_color(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scrollbar_set_label_color(arg1: *mut Fl_Scrollbar, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Scrollbar_label_font(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_set_label_font(arg1: *mut Fl_Scrollbar, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_label_size(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_set_label_size(arg1: *mut Fl_Scrollbar, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_label_type(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_set_label_type(arg1: *mut Fl_Scrollbar, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_box(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_set_box(arg1: *mut Fl_Scrollbar, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_changed(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_set_changed(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_clear_changed(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_align(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_set_align(arg1: *mut Fl_Scrollbar, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_delete(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_set_image(arg1: *mut Fl_Scrollbar, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scrollbar_handle(
        self_: *mut Fl_Scrollbar,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_handle_event(
        self_: *mut Fl_Scrollbar,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_draw(
        self_: *mut Fl_Scrollbar,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_resize_callback(
        self_: *mut Fl_Scrollbar,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_set_when(arg1: *mut Fl_Scrollbar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_when(arg1: *const Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_image(arg1: *const Fl_Scrollbar) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_parent(self_: *const Fl_Scrollbar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_selection_color(arg1: *mut Fl_Scrollbar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scrollbar_set_selection_color(arg1: *mut Fl_Scrollbar, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Scrollbar_do_callback(arg1: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_inside(
        self_: *const Fl_Scrollbar,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_window(arg1: *const Fl_Scrollbar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_top_window(arg1: *const Fl_Scrollbar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_takes_events(arg1: *const Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_user_data(arg1: *const Fl_Scrollbar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_take_focus(self_: *mut Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_set_visible_focus(self_: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_clear_visible_focus(self_: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_visible_focus(self_: *mut Fl_Scrollbar, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_has_visible_focus(self_: *mut Fl_Scrollbar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scrollbar_set_user_data(arg1: *mut Fl_Scrollbar, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scrollbar_draw_data(self_: *const Fl_Scrollbar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_handle_data(self_: *const Fl_Scrollbar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_set_draw_data(self_: *mut Fl_Scrollbar, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scrollbar_set_handle_data(
        self_: *mut Fl_Scrollbar,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_damage(self_: *const Fl_Scrollbar) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Scrollbar_set_damage(self_: *mut Fl_Scrollbar, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Scrollbar_set_damage_area(
        self_: *mut Fl_Scrollbar,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_clear_damage(self_: *mut Fl_Scrollbar);
}
extern "C" {
    pub fn Fl_Scrollbar_as_window(self_: *mut Fl_Scrollbar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_as_group(self_: *mut Fl_Scrollbar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_set_deimage(arg1: *mut Fl_Scrollbar, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Scrollbar_deimage(arg1: *const Fl_Scrollbar) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Scrollbar_set_callback(
        arg1: *mut Fl_Scrollbar,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_set_deleter(
        arg1: *mut Fl_Scrollbar,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_visible(self_: *const Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_visible_r(self_: *const Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_active(self_: *const Fl_Scrollbar) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Scrollbar_active_r(self_: *const Fl_Scrollbar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_callback(self_: *const Fl_Scrollbar) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Scrollbar_set_deletion_callback(
        self_: *mut Fl_Scrollbar,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Scrollbar_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Scrollbar;
}
extern "C" {
    pub fn Fl_Scrollbar_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Scrollbar;
}
extern "C" {
    pub fn Fl_Scrollbar_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_set_bounds(arg1: *mut Fl_Scrollbar, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Scrollbar_minimum(arg1: *mut Fl_Scrollbar) -> f64;
}
extern "C" {
    pub fn Fl_Scrollbar_set_minimum(arg1: *mut Fl_Scrollbar, a: f64);
}
extern "C" {
    pub fn Fl_Scrollbar_maximum(arg1: *mut Fl_Scrollbar) -> f64;
}
extern "C" {
    pub fn Fl_Scrollbar_set_maximum(arg1: *mut Fl_Scrollbar, a: f64);
}
extern "C" {
    pub fn Fl_Scrollbar_set_range(arg1: *mut Fl_Scrollbar, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Scrollbar_set_step(arg1: *mut Fl_Scrollbar, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_step(arg1: *mut Fl_Scrollbar) -> f64;
}
extern "C" {
    pub fn Fl_Scrollbar_set_precision(arg1: *mut Fl_Scrollbar, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Scrollbar_value(arg1: *mut Fl_Scrollbar) -> f64;
}
extern "C" {
    pub fn Fl_Scrollbar_set_value(arg1: *mut Fl_Scrollbar, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_format(
        arg1: *mut Fl_Scrollbar,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Scrollbar_round(arg1: *mut Fl_Scrollbar, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Scrollbar_clamp(arg1: *mut Fl_Scrollbar, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Scrollbar_increment(
        arg1: *mut Fl_Scrollbar,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Value_Slider {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Value_Slider_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Value_Slider;
}
extern "C" {
    pub fn Fl_Value_Slider_x(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_y(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_width(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_height(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_label(arg1: *mut Fl_Value_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Value_Slider_set_label(
        arg1: *mut Fl_Value_Slider,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_redraw(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_show(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_hide(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_activate(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_deactivate(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_redraw_label(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_resize(
        arg1: *mut Fl_Value_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_widget_resize(
        arg1: *mut Fl_Value_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_tooltip(arg1: *mut Fl_Value_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Value_Slider_set_tooltip(
        arg1: *mut Fl_Value_Slider,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_get_type(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_type(arg1: *mut Fl_Value_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_color(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Slider_set_color(arg1: *mut Fl_Value_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Value_Slider_measure_label(
        arg1: *const Fl_Value_Slider,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_label_color(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Slider_set_label_color(
        arg1: *mut Fl_Value_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_label_font(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_label_font(arg1: *mut Fl_Value_Slider, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_label_size(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_label_size(arg1: *mut Fl_Value_Slider, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_label_type(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_label_type(arg1: *mut Fl_Value_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_box(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_box(arg1: *mut Fl_Value_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_changed(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_changed(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_clear_changed(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_align(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_align(arg1: *mut Fl_Value_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_delete(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_set_image(arg1: *mut Fl_Value_Slider, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Value_Slider_handle(
        self_: *mut Fl_Value_Slider,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_handle_event(
        self_: *mut Fl_Value_Slider,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_draw(
        self_: *mut Fl_Value_Slider,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_resize_callback(
        self_: *mut Fl_Value_Slider,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_set_when(arg1: *mut Fl_Value_Slider, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_when(arg1: *const Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_image(arg1: *const Fl_Value_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_parent(self_: *const Fl_Value_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_selection_color(arg1: *mut Fl_Value_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Slider_set_selection_color(
        arg1: *mut Fl_Value_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_do_callback(arg1: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_inside(
        self_: *const Fl_Value_Slider,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_window(arg1: *const Fl_Value_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_top_window(arg1: *const Fl_Value_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_takes_events(arg1: *const Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_user_data(arg1: *const Fl_Value_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_take_focus(self_: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_visible_focus(self_: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_clear_visible_focus(self_: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_visible_focus(self_: *mut Fl_Value_Slider, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_has_visible_focus(self_: *mut Fl_Value_Slider)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Slider_set_user_data(
        arg1: *mut Fl_Value_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_draw_data(self_: *const Fl_Value_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_handle_data(
        self_: *const Fl_Value_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_set_draw_data(
        self_: *mut Fl_Value_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_set_handle_data(
        self_: *mut Fl_Value_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_damage(self_: *const Fl_Value_Slider) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Value_Slider_set_damage(self_: *mut Fl_Value_Slider, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Value_Slider_set_damage_area(
        self_: *mut Fl_Value_Slider,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_clear_damage(self_: *mut Fl_Value_Slider);
}
extern "C" {
    pub fn Fl_Value_Slider_as_window(self_: *mut Fl_Value_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_as_group(self_: *mut Fl_Value_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_set_deimage(
        arg1: *mut Fl_Value_Slider,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_deimage(arg1: *const Fl_Value_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Slider_set_callback(
        arg1: *mut Fl_Value_Slider,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_set_deleter(
        arg1: *mut Fl_Value_Slider,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_visible(self_: *const Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_visible_r(self_: *const Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_active(self_: *const Fl_Value_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Slider_active_r(self_: *const Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_callback(self_: *const Fl_Value_Slider) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Value_Slider_set_deletion_callback(
        self_: *mut Fl_Value_Slider,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Slider_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Value_Slider;
}
extern "C" {
    pub fn Fl_Value_Slider_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Value_Slider;
}
extern "C" {
    pub fn Fl_Value_Slider_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_set_text_color(self_: *mut Fl_Value_Slider, c: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Value_Slider_text_color(self_: *mut Fl_Value_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Slider_set_text_font(self_: *mut Fl_Value_Slider, f: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_text_font(self_: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_text_size(self_: *mut Fl_Value_Slider, s: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_text_size(self_: *mut Fl_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_set_bounds(arg1: *mut Fl_Value_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Value_Slider_minimum(arg1: *mut Fl_Value_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Value_Slider_set_minimum(arg1: *mut Fl_Value_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Value_Slider_maximum(arg1: *mut Fl_Value_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Value_Slider_set_maximum(arg1: *mut Fl_Value_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Value_Slider_set_range(arg1: *mut Fl_Value_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Value_Slider_set_step(arg1: *mut Fl_Value_Slider, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_step(arg1: *mut Fl_Value_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Value_Slider_set_precision(arg1: *mut Fl_Value_Slider, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Slider_value(arg1: *mut Fl_Value_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Value_Slider_set_value(
        arg1: *mut Fl_Value_Slider,
        arg2: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_format(
        arg1: *mut Fl_Value_Slider,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Slider_round(arg1: *mut Fl_Value_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Value_Slider_clamp(arg1: *mut Fl_Value_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Value_Slider_increment(
        arg1: *mut Fl_Value_Slider,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Adjuster {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Adjuster_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Adjuster;
}
extern "C" {
    pub fn Fl_Adjuster_x(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_y(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_width(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_height(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_label(arg1: *mut Fl_Adjuster) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Adjuster_set_label(arg1: *mut Fl_Adjuster, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Adjuster_redraw(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_show(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_hide(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_activate(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_deactivate(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_redraw_label(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_resize(
        arg1: *mut Fl_Adjuster,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Adjuster_widget_resize(
        arg1: *mut Fl_Adjuster,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Adjuster_tooltip(arg1: *mut Fl_Adjuster) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Adjuster_set_tooltip(arg1: *mut Fl_Adjuster, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Adjuster_get_type(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_set_type(arg1: *mut Fl_Adjuster, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_color(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Adjuster_set_color(arg1: *mut Fl_Adjuster, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Adjuster_measure_label(
        arg1: *const Fl_Adjuster,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Adjuster_label_color(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Adjuster_set_label_color(arg1: *mut Fl_Adjuster, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Adjuster_label_font(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_set_label_font(arg1: *mut Fl_Adjuster, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_label_size(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_set_label_size(arg1: *mut Fl_Adjuster, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_label_type(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_set_label_type(arg1: *mut Fl_Adjuster, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_box(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_set_box(arg1: *mut Fl_Adjuster, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_changed(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_set_changed(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_clear_changed(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_align(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_set_align(arg1: *mut Fl_Adjuster, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_delete(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_set_image(arg1: *mut Fl_Adjuster, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Adjuster_handle(
        self_: *mut Fl_Adjuster,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Adjuster_handle_event(
        self_: *mut Fl_Adjuster,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_draw(
        self_: *mut Fl_Adjuster,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Adjuster_resize_callback(
        self_: *mut Fl_Adjuster,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Adjuster_set_when(arg1: *mut Fl_Adjuster, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_when(arg1: *const Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_image(arg1: *const Fl_Adjuster) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_parent(self_: *const Fl_Adjuster) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_selection_color(arg1: *mut Fl_Adjuster) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Adjuster_set_selection_color(arg1: *mut Fl_Adjuster, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Adjuster_do_callback(arg1: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_inside(
        self_: *const Fl_Adjuster,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_window(arg1: *const Fl_Adjuster) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_top_window(arg1: *const Fl_Adjuster) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_takes_events(arg1: *const Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_user_data(arg1: *const Fl_Adjuster) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_take_focus(self_: *mut Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_set_visible_focus(self_: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_clear_visible_focus(self_: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_visible_focus(self_: *mut Fl_Adjuster, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_has_visible_focus(self_: *mut Fl_Adjuster) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Adjuster_set_user_data(arg1: *mut Fl_Adjuster, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Adjuster_draw_data(self_: *const Fl_Adjuster) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_handle_data(self_: *const Fl_Adjuster) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_set_draw_data(self_: *mut Fl_Adjuster, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Adjuster_set_handle_data(self_: *mut Fl_Adjuster, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Adjuster_damage(self_: *const Fl_Adjuster) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Adjuster_set_damage(self_: *mut Fl_Adjuster, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Adjuster_set_damage_area(
        self_: *mut Fl_Adjuster,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Adjuster_clear_damage(self_: *mut Fl_Adjuster);
}
extern "C" {
    pub fn Fl_Adjuster_as_window(self_: *mut Fl_Adjuster) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_as_group(self_: *mut Fl_Adjuster) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_set_deimage(arg1: *mut Fl_Adjuster, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Adjuster_deimage(arg1: *const Fl_Adjuster) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Adjuster_set_callback(
        arg1: *mut Fl_Adjuster,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Adjuster_set_deleter(
        arg1: *mut Fl_Adjuster,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Adjuster_visible(self_: *const Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_visible_r(self_: *const Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_active(self_: *const Fl_Adjuster) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Adjuster_active_r(self_: *const Fl_Adjuster) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_callback(self_: *const Fl_Adjuster) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Adjuster_set_deletion_callback(
        self_: *mut Fl_Adjuster,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Adjuster_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Adjuster;
}
extern "C" {
    pub fn Fl_Adjuster_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Adjuster;
}
extern "C" {
    pub fn Fl_Adjuster_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_set_bounds(arg1: *mut Fl_Adjuster, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Adjuster_minimum(arg1: *mut Fl_Adjuster) -> f64;
}
extern "C" {
    pub fn Fl_Adjuster_set_minimum(arg1: *mut Fl_Adjuster, a: f64);
}
extern "C" {
    pub fn Fl_Adjuster_maximum(arg1: *mut Fl_Adjuster) -> f64;
}
extern "C" {
    pub fn Fl_Adjuster_set_maximum(arg1: *mut Fl_Adjuster, a: f64);
}
extern "C" {
    pub fn Fl_Adjuster_set_range(arg1: *mut Fl_Adjuster, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Adjuster_set_step(arg1: *mut Fl_Adjuster, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_step(arg1: *mut Fl_Adjuster) -> f64;
}
extern "C" {
    pub fn Fl_Adjuster_set_precision(arg1: *mut Fl_Adjuster, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Adjuster_value(arg1: *mut Fl_Adjuster) -> f64;
}
extern "C" {
    pub fn Fl_Adjuster_set_value(arg1: *mut Fl_Adjuster, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_format(
        arg1: *mut Fl_Adjuster,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Adjuster_round(arg1: *mut Fl_Adjuster, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Adjuster_clamp(arg1: *mut Fl_Adjuster, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Adjuster_increment(
        arg1: *mut Fl_Adjuster,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Value_Input {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Value_Input_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Value_Input;
}
extern "C" {
    pub fn Fl_Value_Input_x(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_y(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_width(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_height(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_label(arg1: *mut Fl_Value_Input) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Value_Input_set_label(
        arg1: *mut Fl_Value_Input,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Value_Input_redraw(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_show(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_hide(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_activate(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_deactivate(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_redraw_label(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_resize(
        arg1: *mut Fl_Value_Input,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Input_widget_resize(
        arg1: *mut Fl_Value_Input,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Input_tooltip(arg1: *mut Fl_Value_Input) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Value_Input_set_tooltip(
        arg1: *mut Fl_Value_Input,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Value_Input_get_type(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_type(arg1: *mut Fl_Value_Input, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_color(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Input_set_color(arg1: *mut Fl_Value_Input, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Value_Input_measure_label(
        arg1: *const Fl_Value_Input,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Input_label_color(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Input_set_label_color(arg1: *mut Fl_Value_Input, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Value_Input_label_font(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_label_font(arg1: *mut Fl_Value_Input, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_label_size(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_label_size(arg1: *mut Fl_Value_Input, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_label_type(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_label_type(arg1: *mut Fl_Value_Input, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_box(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_box(arg1: *mut Fl_Value_Input, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_changed(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_changed(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_clear_changed(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_align(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_align(arg1: *mut Fl_Value_Input, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_delete(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_set_image(arg1: *mut Fl_Value_Input, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Value_Input_handle(
        self_: *mut Fl_Value_Input,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Input_handle_event(
        self_: *mut Fl_Value_Input,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_draw(
        self_: *mut Fl_Value_Input,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Input_resize_callback(
        self_: *mut Fl_Value_Input,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Input_set_when(arg1: *mut Fl_Value_Input, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_when(arg1: *const Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_image(arg1: *const Fl_Value_Input) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_parent(self_: *const Fl_Value_Input) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_selection_color(arg1: *mut Fl_Value_Input) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Input_set_selection_color(
        arg1: *mut Fl_Value_Input,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Value_Input_do_callback(arg1: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_inside(
        self_: *const Fl_Value_Input,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_window(arg1: *const Fl_Value_Input) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_top_window(arg1: *const Fl_Value_Input) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_takes_events(arg1: *const Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_user_data(arg1: *const Fl_Value_Input) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_take_focus(self_: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_visible_focus(self_: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_clear_visible_focus(self_: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_visible_focus(self_: *mut Fl_Value_Input, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_has_visible_focus(self_: *mut Fl_Value_Input) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Input_set_user_data(
        arg1: *mut Fl_Value_Input,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Input_draw_data(self_: *const Fl_Value_Input) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_handle_data(self_: *const Fl_Value_Input) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_set_draw_data(
        self_: *mut Fl_Value_Input,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Input_set_handle_data(
        self_: *mut Fl_Value_Input,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Input_damage(self_: *const Fl_Value_Input) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Value_Input_set_damage(self_: *mut Fl_Value_Input, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Value_Input_set_damage_area(
        self_: *mut Fl_Value_Input,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Input_clear_damage(self_: *mut Fl_Value_Input);
}
extern "C" {
    pub fn Fl_Value_Input_as_window(self_: *mut Fl_Value_Input) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_as_group(self_: *mut Fl_Value_Input) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_set_deimage(arg1: *mut Fl_Value_Input, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Value_Input_deimage(arg1: *const Fl_Value_Input) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Input_set_callback(
        arg1: *mut Fl_Value_Input,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Input_set_deleter(
        arg1: *mut Fl_Value_Input,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Value_Input_visible(self_: *const Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_visible_r(self_: *const Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_active(self_: *const Fl_Value_Input) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Input_active_r(self_: *const Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_callback(self_: *const Fl_Value_Input) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Value_Input_set_deletion_callback(
        self_: *mut Fl_Value_Input,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Input_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Value_Input;
}
extern "C" {
    pub fn Fl_Value_Input_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Value_Input;
}
extern "C" {
    pub fn Fl_Value_Input_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_set_text_color(self_: *mut Fl_Value_Input, c: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Value_Input_text_color(self_: *mut Fl_Value_Input) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Input_set_text_font(self_: *mut Fl_Value_Input, f: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_text_font(self_: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_text_size(self_: *mut Fl_Value_Input, s: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_text_size(self_: *mut Fl_Value_Input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_set_soft(self_: *mut Fl_Value_Input, val: ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Value_Input_soft(self_: *const Fl_Value_Input) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Value_Input_set_bounds(arg1: *mut Fl_Value_Input, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Value_Input_minimum(arg1: *mut Fl_Value_Input) -> f64;
}
extern "C" {
    pub fn Fl_Value_Input_set_minimum(arg1: *mut Fl_Value_Input, a: f64);
}
extern "C" {
    pub fn Fl_Value_Input_maximum(arg1: *mut Fl_Value_Input) -> f64;
}
extern "C" {
    pub fn Fl_Value_Input_set_maximum(arg1: *mut Fl_Value_Input, a: f64);
}
extern "C" {
    pub fn Fl_Value_Input_set_range(arg1: *mut Fl_Value_Input, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Value_Input_set_step(arg1: *mut Fl_Value_Input, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_step(arg1: *mut Fl_Value_Input) -> f64;
}
extern "C" {
    pub fn Fl_Value_Input_set_precision(arg1: *mut Fl_Value_Input, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Input_value(arg1: *mut Fl_Value_Input) -> f64;
}
extern "C" {
    pub fn Fl_Value_Input_set_value(arg1: *mut Fl_Value_Input, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_format(
        arg1: *mut Fl_Value_Input,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Input_round(arg1: *mut Fl_Value_Input, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Value_Input_clamp(arg1: *mut Fl_Value_Input, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Value_Input_increment(
        arg1: *mut Fl_Value_Input,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Value_Output {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Value_Output_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Value_Output;
}
extern "C" {
    pub fn Fl_Value_Output_x(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_y(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_width(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_height(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_label(arg1: *mut Fl_Value_Output) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Value_Output_set_label(
        arg1: *mut Fl_Value_Output,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Value_Output_redraw(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_show(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_hide(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_activate(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_deactivate(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_redraw_label(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_resize(
        arg1: *mut Fl_Value_Output,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Output_widget_resize(
        arg1: *mut Fl_Value_Output,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Output_tooltip(arg1: *mut Fl_Value_Output) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Value_Output_set_tooltip(
        arg1: *mut Fl_Value_Output,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Value_Output_get_type(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_type(arg1: *mut Fl_Value_Output, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_color(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Output_set_color(arg1: *mut Fl_Value_Output, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Value_Output_measure_label(
        arg1: *const Fl_Value_Output,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Output_label_color(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Output_set_label_color(
        arg1: *mut Fl_Value_Output,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Value_Output_label_font(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_label_font(arg1: *mut Fl_Value_Output, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_label_size(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_label_size(arg1: *mut Fl_Value_Output, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_label_type(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_label_type(arg1: *mut Fl_Value_Output, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_box(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_box(arg1: *mut Fl_Value_Output, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_changed(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_changed(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_clear_changed(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_align(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_align(arg1: *mut Fl_Value_Output, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_delete(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_set_image(arg1: *mut Fl_Value_Output, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Value_Output_handle(
        self_: *mut Fl_Value_Output,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Output_handle_event(
        self_: *mut Fl_Value_Output,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_draw(
        self_: *mut Fl_Value_Output,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Output_resize_callback(
        self_: *mut Fl_Value_Output,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Output_set_when(arg1: *mut Fl_Value_Output, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_when(arg1: *const Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_image(arg1: *const Fl_Value_Output) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_parent(self_: *const Fl_Value_Output) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_selection_color(arg1: *mut Fl_Value_Output) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Output_set_selection_color(
        arg1: *mut Fl_Value_Output,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Value_Output_do_callback(arg1: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_inside(
        self_: *const Fl_Value_Output,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_window(arg1: *const Fl_Value_Output) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_top_window(arg1: *const Fl_Value_Output) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_takes_events(arg1: *const Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_user_data(arg1: *const Fl_Value_Output) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_take_focus(self_: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_visible_focus(self_: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_clear_visible_focus(self_: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_visible_focus(self_: *mut Fl_Value_Output, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_has_visible_focus(self_: *mut Fl_Value_Output)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Output_set_user_data(
        arg1: *mut Fl_Value_Output,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Output_draw_data(self_: *const Fl_Value_Output) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_handle_data(
        self_: *const Fl_Value_Output,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_set_draw_data(
        self_: *mut Fl_Value_Output,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Output_set_handle_data(
        self_: *mut Fl_Value_Output,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Output_damage(self_: *const Fl_Value_Output) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Value_Output_set_damage(self_: *mut Fl_Value_Output, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Value_Output_set_damage_area(
        self_: *mut Fl_Value_Output,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Value_Output_clear_damage(self_: *mut Fl_Value_Output);
}
extern "C" {
    pub fn Fl_Value_Output_as_window(self_: *mut Fl_Value_Output) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_as_group(self_: *mut Fl_Value_Output) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_set_deimage(
        arg1: *mut Fl_Value_Output,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Output_deimage(arg1: *const Fl_Value_Output) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Value_Output_set_callback(
        arg1: *mut Fl_Value_Output,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Output_set_deleter(
        arg1: *mut Fl_Value_Output,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Value_Output_visible(self_: *const Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_visible_r(self_: *const Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_active(self_: *const Fl_Value_Output) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Output_active_r(self_: *const Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_callback(self_: *const Fl_Value_Output) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Value_Output_set_deletion_callback(
        self_: *mut Fl_Value_Output,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Value_Output_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Value_Output;
}
extern "C" {
    pub fn Fl_Value_Output_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Value_Output;
}
extern "C" {
    pub fn Fl_Value_Output_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_set_text_color(self_: *mut Fl_Value_Output, c: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Value_Output_text_color(self_: *mut Fl_Value_Output) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Value_Output_set_text_font(self_: *mut Fl_Value_Output, f: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_text_font(self_: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_text_size(self_: *mut Fl_Value_Output, s: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_text_size(self_: *mut Fl_Value_Output) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_set_bounds(arg1: *mut Fl_Value_Output, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Value_Output_minimum(arg1: *mut Fl_Value_Output) -> f64;
}
extern "C" {
    pub fn Fl_Value_Output_set_minimum(arg1: *mut Fl_Value_Output, a: f64);
}
extern "C" {
    pub fn Fl_Value_Output_maximum(arg1: *mut Fl_Value_Output) -> f64;
}
extern "C" {
    pub fn Fl_Value_Output_set_maximum(arg1: *mut Fl_Value_Output, a: f64);
}
extern "C" {
    pub fn Fl_Value_Output_set_range(arg1: *mut Fl_Value_Output, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Value_Output_set_step(arg1: *mut Fl_Value_Output, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_step(arg1: *mut Fl_Value_Output) -> f64;
}
extern "C" {
    pub fn Fl_Value_Output_set_precision(arg1: *mut Fl_Value_Output, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Value_Output_value(arg1: *mut Fl_Value_Output) -> f64;
}
extern "C" {
    pub fn Fl_Value_Output_set_value(
        arg1: *mut Fl_Value_Output,
        arg2: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_format(
        arg1: *mut Fl_Value_Output,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Value_Output_round(arg1: *mut Fl_Value_Output, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Value_Output_clamp(arg1: *mut Fl_Value_Output, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Value_Output_increment(
        arg1: *mut Fl_Value_Output,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Fill_Slider {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Fill_Slider_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Fill_Slider;
}
extern "C" {
    pub fn Fl_Fill_Slider_x(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_y(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_width(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_height(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_label(arg1: *mut Fl_Fill_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_label(
        arg1: *mut Fl_Fill_Slider,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_redraw(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_show(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_hide(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_activate(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_deactivate(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_redraw_label(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_resize(
        arg1: *mut Fl_Fill_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_widget_resize(
        arg1: *mut Fl_Fill_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_tooltip(arg1: *mut Fl_Fill_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_tooltip(
        arg1: *mut Fl_Fill_Slider,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_get_type(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_type(arg1: *mut Fl_Fill_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_color(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_color(arg1: *mut Fl_Fill_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Fill_Slider_measure_label(
        arg1: *const Fl_Fill_Slider,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_label_color(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_label_color(arg1: *mut Fl_Fill_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Fill_Slider_label_font(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_label_font(arg1: *mut Fl_Fill_Slider, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_label_size(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_label_size(arg1: *mut Fl_Fill_Slider, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_label_type(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_label_type(arg1: *mut Fl_Fill_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_box(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_box(arg1: *mut Fl_Fill_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_changed(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_changed(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_clear_changed(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_align(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_align(arg1: *mut Fl_Fill_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_delete(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_set_image(arg1: *mut Fl_Fill_Slider, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Fill_Slider_handle(
        self_: *mut Fl_Fill_Slider,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_handle_event(
        self_: *mut Fl_Fill_Slider,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_draw(
        self_: *mut Fl_Fill_Slider,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_resize_callback(
        self_: *mut Fl_Fill_Slider,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_set_when(arg1: *mut Fl_Fill_Slider, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_when(arg1: *const Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_image(arg1: *const Fl_Fill_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_parent(self_: *const Fl_Fill_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_selection_color(arg1: *mut Fl_Fill_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_selection_color(
        arg1: *mut Fl_Fill_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_do_callback(arg1: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_inside(
        self_: *const Fl_Fill_Slider,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_window(arg1: *const Fl_Fill_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_top_window(arg1: *const Fl_Fill_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_takes_events(arg1: *const Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_user_data(arg1: *const Fl_Fill_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_take_focus(self_: *mut Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_visible_focus(self_: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_clear_visible_focus(self_: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_visible_focus(self_: *mut Fl_Fill_Slider, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_has_visible_focus(self_: *mut Fl_Fill_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_user_data(
        arg1: *mut Fl_Fill_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_draw_data(self_: *const Fl_Fill_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_handle_data(self_: *const Fl_Fill_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_draw_data(
        self_: *mut Fl_Fill_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_set_handle_data(
        self_: *mut Fl_Fill_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_damage(self_: *const Fl_Fill_Slider) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_damage(self_: *mut Fl_Fill_Slider, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Fill_Slider_set_damage_area(
        self_: *mut Fl_Fill_Slider,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_clear_damage(self_: *mut Fl_Fill_Slider);
}
extern "C" {
    pub fn Fl_Fill_Slider_as_window(self_: *mut Fl_Fill_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_as_group(self_: *mut Fl_Fill_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_deimage(arg1: *mut Fl_Fill_Slider, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Fill_Slider_deimage(arg1: *const Fl_Fill_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_callback(
        arg1: *mut Fl_Fill_Slider,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_set_deleter(
        arg1: *mut Fl_Fill_Slider,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_visible(self_: *const Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_visible_r(self_: *const Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_active(self_: *const Fl_Fill_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Slider_active_r(self_: *const Fl_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_callback(self_: *const Fl_Fill_Slider) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_deletion_callback(
        self_: *mut Fl_Fill_Slider,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Slider_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Fill_Slider;
}
extern "C" {
    pub fn Fl_Fill_Slider_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Fill_Slider;
}
extern "C" {
    pub fn Fl_Fill_Slider_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_set_bounds(arg1: *mut Fl_Fill_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Fill_Slider_minimum(arg1: *mut Fl_Fill_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_minimum(arg1: *mut Fl_Fill_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Fill_Slider_maximum(arg1: *mut Fl_Fill_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_maximum(arg1: *mut Fl_Fill_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Fill_Slider_set_range(arg1: *mut Fl_Fill_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Fill_Slider_set_step(arg1: *mut Fl_Fill_Slider, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_step(arg1: *mut Fl_Fill_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_precision(arg1: *mut Fl_Fill_Slider, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Slider_value(arg1: *mut Fl_Fill_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Slider_set_value(arg1: *mut Fl_Fill_Slider, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_format(
        arg1: *mut Fl_Fill_Slider,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Slider_round(arg1: *mut Fl_Fill_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Slider_clamp(arg1: *mut Fl_Fill_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Slider_increment(
        arg1: *mut Fl_Fill_Slider,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Fill_Dial {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Fill_Dial_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Fill_Dial;
}
extern "C" {
    pub fn Fl_Fill_Dial_x(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_y(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_width(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_height(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_label(arg1: *mut Fl_Fill_Dial) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_label(arg1: *mut Fl_Fill_Dial, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Fill_Dial_redraw(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_show(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_hide(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_activate(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_deactivate(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_redraw_label(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_resize(
        arg1: *mut Fl_Fill_Dial,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_widget_resize(
        arg1: *mut Fl_Fill_Dial,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_tooltip(arg1: *mut Fl_Fill_Dial) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_tooltip(arg1: *mut Fl_Fill_Dial, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Fill_Dial_get_type(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_type(arg1: *mut Fl_Fill_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_color(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_color(arg1: *mut Fl_Fill_Dial, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Fill_Dial_measure_label(
        arg1: *const Fl_Fill_Dial,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_label_color(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_label_color(arg1: *mut Fl_Fill_Dial, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Fill_Dial_label_font(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_label_font(arg1: *mut Fl_Fill_Dial, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_label_size(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_label_size(arg1: *mut Fl_Fill_Dial, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_label_type(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_label_type(arg1: *mut Fl_Fill_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_box(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_box(arg1: *mut Fl_Fill_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_changed(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_changed(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_clear_changed(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_align(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_align(arg1: *mut Fl_Fill_Dial, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_delete(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_set_image(arg1: *mut Fl_Fill_Dial, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Fill_Dial_handle(
        self_: *mut Fl_Fill_Dial,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_handle_event(
        self_: *mut Fl_Fill_Dial,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_draw(
        self_: *mut Fl_Fill_Dial,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_resize_callback(
        self_: *mut Fl_Fill_Dial,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_set_when(arg1: *mut Fl_Fill_Dial, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_when(arg1: *const Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_image(arg1: *const Fl_Fill_Dial) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_parent(self_: *const Fl_Fill_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_selection_color(arg1: *mut Fl_Fill_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_selection_color(arg1: *mut Fl_Fill_Dial, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Fill_Dial_do_callback(arg1: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_inside(
        self_: *const Fl_Fill_Dial,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_window(arg1: *const Fl_Fill_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_top_window(arg1: *const Fl_Fill_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_takes_events(arg1: *const Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_user_data(arg1: *const Fl_Fill_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_take_focus(self_: *mut Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_visible_focus(self_: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_clear_visible_focus(self_: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_visible_focus(self_: *mut Fl_Fill_Dial, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_has_visible_focus(self_: *mut Fl_Fill_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_user_data(arg1: *mut Fl_Fill_Dial, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Fill_Dial_draw_data(self_: *const Fl_Fill_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_handle_data(self_: *const Fl_Fill_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_draw_data(self_: *mut Fl_Fill_Dial, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Fill_Dial_set_handle_data(
        self_: *mut Fl_Fill_Dial,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_damage(self_: *const Fl_Fill_Dial) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_damage(self_: *mut Fl_Fill_Dial, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Fill_Dial_set_damage_area(
        self_: *mut Fl_Fill_Dial,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_clear_damage(self_: *mut Fl_Fill_Dial);
}
extern "C" {
    pub fn Fl_Fill_Dial_as_window(self_: *mut Fl_Fill_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_as_group(self_: *mut Fl_Fill_Dial) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_deimage(arg1: *mut Fl_Fill_Dial, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Fill_Dial_deimage(arg1: *const Fl_Fill_Dial) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_callback(
        arg1: *mut Fl_Fill_Dial,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_set_deleter(
        arg1: *mut Fl_Fill_Dial,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_visible(self_: *const Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_visible_r(self_: *const Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_active(self_: *const Fl_Fill_Dial) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Fill_Dial_active_r(self_: *const Fl_Fill_Dial) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_callback(self_: *const Fl_Fill_Dial) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_deletion_callback(
        self_: *mut Fl_Fill_Dial,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Fill_Dial_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Fill_Dial;
}
extern "C" {
    pub fn Fl_Fill_Dial_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Fill_Dial;
}
extern "C" {
    pub fn Fl_Fill_Dial_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_set_bounds(arg1: *mut Fl_Fill_Dial, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Fill_Dial_minimum(arg1: *mut Fl_Fill_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_minimum(arg1: *mut Fl_Fill_Dial, a: f64);
}
extern "C" {
    pub fn Fl_Fill_Dial_maximum(arg1: *mut Fl_Fill_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_maximum(arg1: *mut Fl_Fill_Dial, a: f64);
}
extern "C" {
    pub fn Fl_Fill_Dial_set_range(arg1: *mut Fl_Fill_Dial, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Fill_Dial_set_step(arg1: *mut Fl_Fill_Dial, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_step(arg1: *mut Fl_Fill_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_precision(arg1: *mut Fl_Fill_Dial, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Fill_Dial_value(arg1: *mut Fl_Fill_Dial) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Dial_set_value(arg1: *mut Fl_Fill_Dial, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_format(
        arg1: *mut Fl_Fill_Dial,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Fill_Dial_round(arg1: *mut Fl_Fill_Dial, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Dial_clamp(arg1: *mut Fl_Fill_Dial, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Fill_Dial_increment(
        arg1: *mut Fl_Fill_Dial,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Hor_Slider {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Hor_Slider_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Hor_Slider;
}
extern "C" {
    pub fn Fl_Hor_Slider_x(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_y(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_width(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_height(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_label(arg1: *mut Fl_Hor_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_label(arg1: *mut Fl_Hor_Slider, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Hor_Slider_redraw(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_show(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_hide(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_activate(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_deactivate(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_redraw_label(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_resize(
        arg1: *mut Fl_Hor_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_widget_resize(
        arg1: *mut Fl_Hor_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_tooltip(arg1: *mut Fl_Hor_Slider) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_tooltip(arg1: *mut Fl_Hor_Slider, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Hor_Slider_get_type(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_type(arg1: *mut Fl_Hor_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_color(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_color(arg1: *mut Fl_Hor_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Hor_Slider_measure_label(
        arg1: *const Fl_Hor_Slider,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_label_color(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_label_color(arg1: *mut Fl_Hor_Slider, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Hor_Slider_label_font(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_label_font(arg1: *mut Fl_Hor_Slider, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_label_size(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_label_size(arg1: *mut Fl_Hor_Slider, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_label_type(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_label_type(arg1: *mut Fl_Hor_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_box(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_box(arg1: *mut Fl_Hor_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_changed(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_changed(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_clear_changed(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_align(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_align(arg1: *mut Fl_Hor_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_delete(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_set_image(arg1: *mut Fl_Hor_Slider, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Hor_Slider_handle(
        self_: *mut Fl_Hor_Slider,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_handle_event(
        self_: *mut Fl_Hor_Slider,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_draw(
        self_: *mut Fl_Hor_Slider,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_resize_callback(
        self_: *mut Fl_Hor_Slider,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_set_when(arg1: *mut Fl_Hor_Slider, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_when(arg1: *const Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_image(arg1: *const Fl_Hor_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_parent(self_: *const Fl_Hor_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_selection_color(arg1: *mut Fl_Hor_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_selection_color(
        arg1: *mut Fl_Hor_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_do_callback(arg1: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_inside(
        self_: *const Fl_Hor_Slider,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_window(arg1: *const Fl_Hor_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_top_window(arg1: *const Fl_Hor_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_takes_events(arg1: *const Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_user_data(arg1: *const Fl_Hor_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_take_focus(self_: *mut Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_visible_focus(self_: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_clear_visible_focus(self_: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_visible_focus(self_: *mut Fl_Hor_Slider, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_has_visible_focus(self_: *mut Fl_Hor_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_user_data(arg1: *mut Fl_Hor_Slider, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Hor_Slider_draw_data(self_: *const Fl_Hor_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_handle_data(self_: *const Fl_Hor_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_draw_data(
        self_: *mut Fl_Hor_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_set_handle_data(
        self_: *mut Fl_Hor_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_damage(self_: *const Fl_Hor_Slider) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_damage(self_: *mut Fl_Hor_Slider, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Hor_Slider_set_damage_area(
        self_: *mut Fl_Hor_Slider,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_clear_damage(self_: *mut Fl_Hor_Slider);
}
extern "C" {
    pub fn Fl_Hor_Slider_as_window(self_: *mut Fl_Hor_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_as_group(self_: *mut Fl_Hor_Slider) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_deimage(arg1: *mut Fl_Hor_Slider, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Hor_Slider_deimage(arg1: *const Fl_Hor_Slider) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_callback(
        arg1: *mut Fl_Hor_Slider,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_set_deleter(
        arg1: *mut Fl_Hor_Slider,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_visible(self_: *const Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_visible_r(self_: *const Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_active(self_: *const Fl_Hor_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Slider_active_r(self_: *const Fl_Hor_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_callback(self_: *const Fl_Hor_Slider) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_deletion_callback(
        self_: *mut Fl_Hor_Slider,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Slider_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Hor_Slider;
}
extern "C" {
    pub fn Fl_Hor_Slider_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Hor_Slider;
}
extern "C" {
    pub fn Fl_Hor_Slider_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_set_bounds(arg1: *mut Fl_Hor_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Hor_Slider_minimum(arg1: *mut Fl_Hor_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_minimum(arg1: *mut Fl_Hor_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Hor_Slider_maximum(arg1: *mut Fl_Hor_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_maximum(arg1: *mut Fl_Hor_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Hor_Slider_set_range(arg1: *mut Fl_Hor_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Hor_Slider_set_step(arg1: *mut Fl_Hor_Slider, a: f64, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_step(arg1: *mut Fl_Hor_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_precision(arg1: *mut Fl_Hor_Slider, digits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Slider_value(arg1: *mut Fl_Hor_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Slider_set_value(arg1: *mut Fl_Hor_Slider, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_format(
        arg1: *mut Fl_Hor_Slider,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Slider_round(arg1: *mut Fl_Hor_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Slider_clamp(arg1: *mut Fl_Hor_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Slider_increment(
        arg1: *mut Fl_Hor_Slider,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Hor_Fill_Slider {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Hor_Fill_Slider;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_x(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_y(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_width(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_height(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_label(arg1: *mut Fl_Hor_Fill_Slider)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_label(
        arg1: *mut Fl_Hor_Fill_Slider,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_redraw(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_show(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_hide(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_activate(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_deactivate(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_redraw_label(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_resize(
        arg1: *mut Fl_Hor_Fill_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_widget_resize(
        arg1: *mut Fl_Hor_Fill_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_tooltip(
        arg1: *mut Fl_Hor_Fill_Slider,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_tooltip(
        arg1: *mut Fl_Hor_Fill_Slider,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_get_type(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_type(arg1: *mut Fl_Hor_Fill_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_color(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_color(
        arg1: *mut Fl_Hor_Fill_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_measure_label(
        arg1: *const Fl_Hor_Fill_Slider,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_label_color(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_label_color(
        arg1: *mut Fl_Hor_Fill_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_label_font(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_label_font(
        arg1: *mut Fl_Hor_Fill_Slider,
        font: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_label_size(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_label_size(
        arg1: *mut Fl_Hor_Fill_Slider,
        sz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_label_type(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_label_type(
        arg1: *mut Fl_Hor_Fill_Slider,
        typ: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_box(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_box(arg1: *mut Fl_Hor_Fill_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_changed(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_changed(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_clear_changed(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_align(arg1: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_align(arg1: *mut Fl_Hor_Fill_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_delete(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_image(
        arg1: *mut Fl_Hor_Fill_Slider,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_handle(
        self_: *mut Fl_Hor_Fill_Slider,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_handle_event(
        self_: *mut Fl_Hor_Fill_Slider,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_draw(
        self_: *mut Fl_Hor_Fill_Slider,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_resize_callback(
        self_: *mut Fl_Hor_Fill_Slider,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_when(arg1: *mut Fl_Hor_Fill_Slider, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_when(arg1: *const Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_image(
        arg1: *const Fl_Hor_Fill_Slider,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_parent(
        self_: *const Fl_Hor_Fill_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_selection_color(
        arg1: *mut Fl_Hor_Fill_Slider,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_selection_color(
        arg1: *mut Fl_Hor_Fill_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_do_callback(arg1: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_inside(
        self_: *const Fl_Hor_Fill_Slider,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_window(
        arg1: *const Fl_Hor_Fill_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_top_window(
        arg1: *const Fl_Hor_Fill_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_takes_events(
        arg1: *const Fl_Hor_Fill_Slider,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_user_data(
        arg1: *const Fl_Hor_Fill_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_take_focus(self_: *mut Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_visible_focus(self_: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_clear_visible_focus(self_: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_visible_focus(
        self_: *mut Fl_Hor_Fill_Slider,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_has_visible_focus(
        self_: *mut Fl_Hor_Fill_Slider,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_user_data(
        arg1: *mut Fl_Hor_Fill_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_draw_data(
        self_: *const Fl_Hor_Fill_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_handle_data(
        self_: *const Fl_Hor_Fill_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_draw_data(
        self_: *mut Fl_Hor_Fill_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_handle_data(
        self_: *mut Fl_Hor_Fill_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_damage(self_: *const Fl_Hor_Fill_Slider) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_damage(
        self_: *mut Fl_Hor_Fill_Slider,
        flag: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_damage_area(
        self_: *mut Fl_Hor_Fill_Slider,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_clear_damage(self_: *mut Fl_Hor_Fill_Slider);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_as_window(
        self_: *mut Fl_Hor_Fill_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_as_group(
        self_: *mut Fl_Hor_Fill_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_deimage(
        arg1: *mut Fl_Hor_Fill_Slider,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_deimage(
        arg1: *const Fl_Hor_Fill_Slider,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_callback(
        arg1: *mut Fl_Hor_Fill_Slider,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_deleter(
        arg1: *mut Fl_Hor_Fill_Slider,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_visible(self_: *const Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_visible_r(self_: *const Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_active(self_: *const Fl_Hor_Fill_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_active_r(self_: *const Fl_Hor_Fill_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_callback(self_: *const Fl_Hor_Fill_Slider) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_deletion_callback(
        self_: *mut Fl_Hor_Fill_Slider,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Hor_Fill_Slider;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Hor_Fill_Slider;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_bounds(arg1: *mut Fl_Hor_Fill_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_minimum(arg1: *mut Fl_Hor_Fill_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_minimum(arg1: *mut Fl_Hor_Fill_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_maximum(arg1: *mut Fl_Hor_Fill_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_maximum(arg1: *mut Fl_Hor_Fill_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_range(arg1: *mut Fl_Hor_Fill_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_step(
        arg1: *mut Fl_Hor_Fill_Slider,
        a: f64,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_step(arg1: *mut Fl_Hor_Fill_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_precision(
        arg1: *mut Fl_Hor_Fill_Slider,
        digits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_value(arg1: *mut Fl_Hor_Fill_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_set_value(
        arg1: *mut Fl_Hor_Fill_Slider,
        arg2: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_format(
        arg1: *mut Fl_Hor_Fill_Slider,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_round(arg1: *mut Fl_Hor_Fill_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_clamp(arg1: *mut Fl_Hor_Fill_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Fill_Slider_increment(
        arg1: *mut Fl_Hor_Fill_Slider,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Hor_Nice_Slider {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Hor_Nice_Slider;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_x(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_y(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_width(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_height(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_label(arg1: *mut Fl_Hor_Nice_Slider)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_label(
        arg1: *mut Fl_Hor_Nice_Slider,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_redraw(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_show(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_hide(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_activate(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_deactivate(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_redraw_label(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_resize(
        arg1: *mut Fl_Hor_Nice_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_widget_resize(
        arg1: *mut Fl_Hor_Nice_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_tooltip(
        arg1: *mut Fl_Hor_Nice_Slider,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_tooltip(
        arg1: *mut Fl_Hor_Nice_Slider,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_get_type(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_type(arg1: *mut Fl_Hor_Nice_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_color(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_color(
        arg1: *mut Fl_Hor_Nice_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_measure_label(
        arg1: *const Fl_Hor_Nice_Slider,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_label_color(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_label_color(
        arg1: *mut Fl_Hor_Nice_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_label_font(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_label_font(
        arg1: *mut Fl_Hor_Nice_Slider,
        font: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_label_size(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_label_size(
        arg1: *mut Fl_Hor_Nice_Slider,
        sz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_label_type(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_label_type(
        arg1: *mut Fl_Hor_Nice_Slider,
        typ: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_box(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_box(arg1: *mut Fl_Hor_Nice_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_changed(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_changed(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_clear_changed(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_align(arg1: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_align(arg1: *mut Fl_Hor_Nice_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_delete(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_image(
        arg1: *mut Fl_Hor_Nice_Slider,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_handle(
        self_: *mut Fl_Hor_Nice_Slider,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_handle_event(
        self_: *mut Fl_Hor_Nice_Slider,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_draw(
        self_: *mut Fl_Hor_Nice_Slider,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_resize_callback(
        self_: *mut Fl_Hor_Nice_Slider,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_when(arg1: *mut Fl_Hor_Nice_Slider, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_when(arg1: *const Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_image(
        arg1: *const Fl_Hor_Nice_Slider,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_parent(
        self_: *const Fl_Hor_Nice_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_selection_color(
        arg1: *mut Fl_Hor_Nice_Slider,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_selection_color(
        arg1: *mut Fl_Hor_Nice_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_do_callback(arg1: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_inside(
        self_: *const Fl_Hor_Nice_Slider,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_window(
        arg1: *const Fl_Hor_Nice_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_top_window(
        arg1: *const Fl_Hor_Nice_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_takes_events(
        arg1: *const Fl_Hor_Nice_Slider,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_user_data(
        arg1: *const Fl_Hor_Nice_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_take_focus(self_: *mut Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_visible_focus(self_: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_clear_visible_focus(self_: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_visible_focus(
        self_: *mut Fl_Hor_Nice_Slider,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_has_visible_focus(
        self_: *mut Fl_Hor_Nice_Slider,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_user_data(
        arg1: *mut Fl_Hor_Nice_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_draw_data(
        self_: *const Fl_Hor_Nice_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_handle_data(
        self_: *const Fl_Hor_Nice_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_draw_data(
        self_: *mut Fl_Hor_Nice_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_handle_data(
        self_: *mut Fl_Hor_Nice_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_damage(self_: *const Fl_Hor_Nice_Slider) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_damage(
        self_: *mut Fl_Hor_Nice_Slider,
        flag: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_damage_area(
        self_: *mut Fl_Hor_Nice_Slider,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_clear_damage(self_: *mut Fl_Hor_Nice_Slider);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_as_window(
        self_: *mut Fl_Hor_Nice_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_as_group(
        self_: *mut Fl_Hor_Nice_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_deimage(
        arg1: *mut Fl_Hor_Nice_Slider,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_deimage(
        arg1: *const Fl_Hor_Nice_Slider,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_callback(
        arg1: *mut Fl_Hor_Nice_Slider,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_deleter(
        arg1: *mut Fl_Hor_Nice_Slider,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_visible(self_: *const Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_visible_r(self_: *const Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_active(self_: *const Fl_Hor_Nice_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_active_r(self_: *const Fl_Hor_Nice_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_callback(self_: *const Fl_Hor_Nice_Slider) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_deletion_callback(
        self_: *mut Fl_Hor_Nice_Slider,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Hor_Nice_Slider;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_from_derived_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Hor_Nice_Slider;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_bounds(arg1: *mut Fl_Hor_Nice_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_minimum(arg1: *mut Fl_Hor_Nice_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_minimum(arg1: *mut Fl_Hor_Nice_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_maximum(arg1: *mut Fl_Hor_Nice_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_maximum(arg1: *mut Fl_Hor_Nice_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_range(arg1: *mut Fl_Hor_Nice_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_step(
        arg1: *mut Fl_Hor_Nice_Slider,
        a: f64,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_step(arg1: *mut Fl_Hor_Nice_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_precision(
        arg1: *mut Fl_Hor_Nice_Slider,
        digits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_value(arg1: *mut Fl_Hor_Nice_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_set_value(
        arg1: *mut Fl_Hor_Nice_Slider,
        arg2: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_format(
        arg1: *mut Fl_Hor_Nice_Slider,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_round(arg1: *mut Fl_Hor_Nice_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_clamp(arg1: *mut Fl_Hor_Nice_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Nice_Slider_increment(
        arg1: *mut Fl_Hor_Nice_Slider,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Hor_Value_Slider {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Hor_Value_Slider;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_x(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_y(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_width(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_height(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_label(
        arg1: *mut Fl_Hor_Value_Slider,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_label(
        arg1: *mut Fl_Hor_Value_Slider,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_redraw(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_show(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_hide(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_activate(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_deactivate(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_redraw_label(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_resize(
        arg1: *mut Fl_Hor_Value_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_widget_resize(
        arg1: *mut Fl_Hor_Value_Slider,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_tooltip(
        arg1: *mut Fl_Hor_Value_Slider,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_tooltip(
        arg1: *mut Fl_Hor_Value_Slider,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_get_type(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_type(arg1: *mut Fl_Hor_Value_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_color(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_color(
        arg1: *mut Fl_Hor_Value_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_measure_label(
        arg1: *const Fl_Hor_Value_Slider,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_label_color(
        arg1: *mut Fl_Hor_Value_Slider,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_label_color(
        arg1: *mut Fl_Hor_Value_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_label_font(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_label_font(
        arg1: *mut Fl_Hor_Value_Slider,
        font: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_label_size(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_label_size(
        arg1: *mut Fl_Hor_Value_Slider,
        sz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_label_type(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_label_type(
        arg1: *mut Fl_Hor_Value_Slider,
        typ: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_box(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_box(arg1: *mut Fl_Hor_Value_Slider, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_changed(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_changed(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_clear_changed(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_align(arg1: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_align(
        arg1: *mut Fl_Hor_Value_Slider,
        typ: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_delete(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_image(
        arg1: *mut Fl_Hor_Value_Slider,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_handle(
        self_: *mut Fl_Hor_Value_Slider,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_handle_event(
        self_: *mut Fl_Hor_Value_Slider,
        event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_draw(
        self_: *mut Fl_Hor_Value_Slider,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_resize_callback(
        self_: *mut Fl_Hor_Value_Slider,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Fl_Widget,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_when(
        arg1: *mut Fl_Hor_Value_Slider,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_when(arg1: *const Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_image(
        arg1: *const Fl_Hor_Value_Slider,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_parent(
        self_: *const Fl_Hor_Value_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_selection_color(
        arg1: *mut Fl_Hor_Value_Slider,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_selection_color(
        arg1: *mut Fl_Hor_Value_Slider,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_do_callback(arg1: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_inside(
        self_: *const Fl_Hor_Value_Slider,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_window(
        arg1: *const Fl_Hor_Value_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_top_window(
        arg1: *const Fl_Hor_Value_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_takes_events(
        arg1: *const Fl_Hor_Value_Slider,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_user_data(
        arg1: *const Fl_Hor_Value_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_take_focus(self_: *mut Fl_Hor_Value_Slider)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_visible_focus(self_: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_clear_visible_focus(self_: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_visible_focus(
        self_: *mut Fl_Hor_Value_Slider,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_has_visible_focus(
        self_: *mut Fl_Hor_Value_Slider,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_user_data(
        arg1: *mut Fl_Hor_Value_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_draw_data(
        self_: *const Fl_Hor_Value_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_handle_data(
        self_: *const Fl_Hor_Value_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_draw_data(
        self_: *mut Fl_Hor_Value_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_handle_data(
        self_: *mut Fl_Hor_Value_Slider,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_damage(self_: *const Fl_Hor_Value_Slider)
        -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_damage(
        self_: *mut Fl_Hor_Value_Slider,
        flag: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_damage_area(
        self_: *mut Fl_Hor_Value_Slider,
        flag: ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_clear_damage(self_: *mut Fl_Hor_Value_Slider);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_as_window(
        self_: *mut Fl_Hor_Value_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_as_group(
        self_: *mut Fl_Hor_Value_Slider,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_deimage(
        arg1: *mut Fl_Hor_Value_Slider,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_deimage(
        arg1: *const Fl_Hor_Value_Slider,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_callback(
        arg1: *mut Fl_Hor_Value_Slider,
        arg2: Fl_Callback,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_deleter(
        arg1: *mut Fl_Hor_Value_Slider,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_visible(self_: *const Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_visible_r(
        self_: *const Fl_Hor_Value_Slider,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_active(self_: *const Fl_Hor_Value_Slider) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_active_r(self_: *const Fl_Hor_Value_Slider)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_callback(self_: *const Fl_Hor_Value_Slider) -> Fl_Callback;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_deletion_callback(
        self_: *mut Fl_Hor_Value_Slider,
        arg1: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_from_dyn_ptr(ptr: *mut Fl_Widget) -> *mut Fl_Hor_Value_Slider;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_from_derived_dyn_ptr(
        ptr: *mut Fl_Widget,
    ) -> *mut Fl_Hor_Value_Slider;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_super_draw(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_super_draw_first(ptr: *mut Fl_Widget, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_text_color(
        self_: *mut Fl_Hor_Value_Slider,
        c: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_text_color(
        self_: *mut Fl_Hor_Value_Slider,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_text_font(
        self_: *mut Fl_Hor_Value_Slider,
        f: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_text_font(self_: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_text_size(
        self_: *mut Fl_Hor_Value_Slider,
        s: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_text_size(self_: *mut Fl_Hor_Value_Slider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_bounds(arg1: *mut Fl_Hor_Value_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_minimum(arg1: *mut Fl_Hor_Value_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_minimum(arg1: *mut Fl_Hor_Value_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_maximum(arg1: *mut Fl_Hor_Value_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_maximum(arg1: *mut Fl_Hor_Value_Slider, a: f64);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_range(arg1: *mut Fl_Hor_Value_Slider, a: f64, b: f64);
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_step(
        arg1: *mut Fl_Hor_Value_Slider,
        a: f64,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_step(arg1: *mut Fl_Hor_Value_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_precision(
        arg1: *mut Fl_Hor_Value_Slider,
        digits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_value(arg1: *mut Fl_Hor_Value_Slider) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_set_value(
        arg1: *mut Fl_Hor_Value_Slider,
        arg2: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_format(
        arg1: *mut Fl_Hor_Value_Slider,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_round(arg1: *mut Fl_Hor_Value_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_clamp(arg1: *mut Fl_Hor_Value_Slider, arg2: f64) -> f64;
}
extern "C" {
    pub fn Fl_Hor_Value_Slider_increment(
        arg1: *mut Fl_Hor_Value_Slider,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
